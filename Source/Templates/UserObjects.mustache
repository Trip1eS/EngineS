/*
* This file is generated by ReflCompiler
*/
// clang-format off
#include "Base/Object.hpp"
#include "Reflection/Type.hpp"
#include "Reflection/TypeRegistry.hpp"
#include "Reflection/Registration.hpp"

{{#objects}}
    #include "{{filePath}}"
{{/objects}}

#include "Refl.hpp"

using namespace EngineS;

#define DROP_FIRST(X, ...) __VA_ARGS__

void EngineS::Registration::RegisterUserObjects() {
{{#objects}}
    Registration::Class<{{className}}>("{{className}}")
    .Bases
    <DROP_FIRST(_{{#bases}}, {{baseName}}{{/bases}})>()
    {{#constructors}}
        .Constructor
        <DROP_FIRST(_{{#params}}, {{typeName}}{{/params}})>({ {{#params}}{"{{paramName}}"},{{/params}} })
    {{/constructors}}
    {{#methods}}
        .Method("{{methodName}}", static_cast
        <MethodType<{{className}}, {{isStatic}}, {{isConst}}, {{returnTypeName}}{{#params}}, {{typeName}}{{/params}}>>(&{{className}}::{{methodName}}), { {{#params}}{"{{paramName}}"},{{/params}} })
    {{/methods}}
    {{#fields}}
        .Field("{{fieldName}}", &{{className}}::{{fieldName}})
    {{/fields}}
    ;

{{/objects}}
TypeRegistry::Instance()->ProcessBases();
}
